// controllers/chatController.js

const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

/**
 * GET /api/chat-rooms
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –∫—ñ–º–Ω–∞—Ç–∏, –≤ —è–∫–∏—Ö –±–µ—Ä–µ —É—á–∞—Å—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á,
 * –∑ –æ—Å—Ç–∞–Ω–Ω—ñ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Ç–∞ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å–Ω–∏–∫—ñ–≤.
 */
exports.listChatRooms = async (req, res) => {
    try {
      const userId = req.user.id;
      const rooms = await prisma.chat_rooms.findMany({
        where: {
          room_users: {
            some: { userId }
          }
        },
        include: {
          room_users: {
            include: {
              user: {
                select: { id: true, username: true }
              }
            }
          },
          messages: {
            orderBy: { createdAt: 'desc' },
            take: 1
          },
          _count: {
            select: {
              messages: {
                where: {
                  status: 'Sent',
                  senderId: { not: userId }
                }
              }
            }
          }
        }
      });
  
      rooms.forEach((room, index) => {
        console.log(`Room ${index + 1}: ${JSON.stringify(room._count)}`);
      });  
      const result = rooms.map(r => {
        // –ó–∞—Ö–∏—â–µ–Ω–æ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ room_users –Ω–µ –º–∞—Å–∏–≤
        const participants = Array.isArray(r.room_users)
          ? r.room_users.map(ru => ({
              id: ru.user.id,
              username: ru.user.username,
            }))
          : [];
  
        // –ó–∞—Ö–∏—â–µ–Ω–æ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ messages –Ω–µ –º–∞—Å–∏–≤
        const lastMessage = Array.isArray(r.messages) && r.messages.length > 0
          ? r.messages[0]
          : null;
  
        return {
          id: r.id,
          theme: r.theme,
          participants,
          lastMessage,
          unreadCount: r._count.messages || 0,
        };
      });
  
      return res.json(result);
    } catch (err) {
      return res.status(500).json({ error: err.message || "Internal server error" });
    }
  };

/**
 * POST /api/chat-rooms
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –∫—ñ–º–Ω–∞—Ç—É –∑ –ø–æ—Ç–æ—á–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —ñ (–æ–ø—Ü—ñ–π–Ω–æ) –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.
 * –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É: { theme: string, partnerId?: number }
 */
// avatar!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
exports.createChatRoom = async (req, res) => {
  const { theme, partnerId } = req.body;
  const userId = req.user.id;

  if (!theme) {
    return res.status(400).json({ error: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–µ–º—É –∫—ñ–º–Ω–∞—Ç–∏" });
  }

  try {
    const connectUsers = [{ id: userId }];
    if (partnerId) {
      connectUsers.push({ id: partnerId });
    }

    const room = await prisma.chat_rooms.create({
      data: {
        theme,
        room_users: {
          create: connectUsers.map(u => ({ user: { connect: { id: u.id } } }))
        }
      },
      include: {
        room_users: {
          include: { user: true }
        }
      }
    });

    // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Å—Ç–∏–ª—ñ listChatRooms
    const participants = room.room_users.map(ru => ({
      id: ru.user.id,
      username: ru.user.username,
      avatar: ru.user.avatar || null
    }));

    res.status(201).json({
      id: room.id,
      theme: room.theme,
      participants,
      lastMessage: null
    });
  } catch (err) {
    console.error("createChatRoom error:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —á–∞—Ç-–∫—ñ–º–Ω–∞—Ç—É" });
  }
};

/**
 * GET /api/chat-rooms/:roomId/messages
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫—ñ–º–Ω–∞—Ç–∏ roomId (–∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º createdAt).
 */
exports.listMessages = async (req, res) => {
  const roomId = parseInt(req.params.roomId, 10);
  const userId = req.user.id;

  // üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ roomId
  if (!roomId || isNaN(roomId)) {
    return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π roomId" });
  }

  try {
    // üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
    const membership = await prisma.room_users.findUnique({
      where: { userId_roomId: { userId, roomId } }
    });

    if (!membership) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π" });
    }

    // üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫—ñ–º–Ω–∞—Ç–∏ –∑ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–æ–º
    const messages = await prisma.chat_messages.findMany({
      where: { roomId },
      orderBy: { createdAt: 'asc' },
      include: {
        sender: {
          select: {
            id: true,
            username: true,
            avatar: true
          }
        }
      }
    });

    // ‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    return res.json({
      roomId,
      messages: messages.map(m => ({
        id: m.id,
        content: m.content,
        createdAt: m.createdAt,
        status: m.status,
        sender: {
          id: m.sender.id,
          username: m.sender.username,
          avatar: m.sender.avatar || null
        }
      }))
    });
  } catch (err) {
    console.error("‚ùå listMessages error:", err);
    return res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" });
  }
};


/**
 * POST /api/chat-rooms/:roomId/messages
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ roomId.
 * –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É: { content: string }
 */
exports.sendMessage = async (req, res) => {
  const roomId = parseInt(req.params.roomId, 10);
  const userId = req.user.id;
  const { content } = req.body;

  if (!roomId || !content) {
    return res.status(400).json({ error: "–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ" });
  }

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –ø—Ä–∏–Ω–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
    const membership = await prisma.room_users.findUnique({
      where: { userId_roomId: { userId, roomId } }
    });
    if (!membership) {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π" });
    }

    const message = await prisma.chat_messages.create({
      data: {
        content,
        room: { connect: { id: roomId } },
        sender: { connect: { id: userId } }
      },
      include: {
        sender: { select: { id: true, username: true, avatar: true } }
      }
    });

    res.status(201).json({
      id: message.id,
      content: message.content,
      createdAt: message.createdAt,
      status: message.status,
      sender: {
        id: message.sender.id,
        username: message.sender.username,
        avatar: message.sender.avatar || null
      }
    });
  } catch (err) {
    console.error("sendMessage error:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" });
  }
};
